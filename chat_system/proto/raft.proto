syntax = "proto3";

package raft;

service RaftService {
  // Leader election
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse) {}
  
  // Log replication
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse) {}
  
  // Leader discovery for clients
  rpc GetLeader(GetLeaderRequest) returns (GetLeaderResponse) {}
  
  // Configuration changes
  rpc AddServer(AddServerRequest) returns (AddServerResponse) {}
  rpc RemoveServer(RemoveServerRequest) returns (RemoveServerResponse) {}
}

// Vote request sent by candidates
message RequestVoteRequest {
  int32 term = 1;            // candidate's term
  string candidateId = 2;    // candidate requesting vote
  int32 lastLogIndex = 3;    // index of candidate's last log entry
  int32 lastLogTerm = 4;     // term of candidate's last log entry
}

message RequestVoteResponse {
  int32 term = 1;        // current term, for candidate to update itself
  bool voteGranted = 2;  // true means candidate received vote
}

// Log replication messages
message LogEntry {
  int32 term = 1;
  int32 index = 2;
  bytes data = 3;        // serialized command data
  string commandType = 4; // type of command for deserialization
}

message AppendEntriesRequest {
  int32 term = 1;            // leader's term
  string leaderId = 2;       // so follower can redirect clients
  int32 prevLogIndex = 3;    // index of log entry immediately preceding new ones
  int32 prevLogTerm = 4;     // term of prevLogIndex entry
  repeated LogEntry entries = 5; // log entries to store (empty for heartbeat)
  int32 leaderCommit = 6;    // leader's commitIndex
}

message AppendEntriesResponse {
  int32 term = 1;        // current term, for leader to update itself
  bool success = 2;      // true if follower contained entry matching prevLogIndex and prevLogTerm
  int32 matchIndex = 3;  // the highest log entry known to be replicated
}

// Leader discovery
message GetLeaderRequest {}

message GetLeaderResponse {
  string leaderId = 1;   // current leader's ID
  string leaderAddress = 2; // leader's address (host:port)
}

// Server management
message AddServerRequest {
  string serverId = 1;
  string serverAddress = 2;
}

message AddServerResponse {
  bool success = 1;
  string error = 2;
}

message RemoveServerRequest {
  string serverId = 1;
}

message RemoveServerResponse {
  bool success = 1;
  string error = 2;
} 