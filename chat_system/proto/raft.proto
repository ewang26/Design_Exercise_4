syntax = "proto3";

package chat;

service RaftService {
  // RequestVote RPC - Used during leader election
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse) {}
  
  // AppendEntries RPC - Used for log replication and heartbeats
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse) {}
}

// Log entry containing term and command
message LogEntry {
  int32 term = 1;
  bytes command = 2;  // Serialized command data
}

// Request vote message sent by candidates
message RequestVoteRequest {
  int32 term = 1;
  int32 candidate_id = 2;
  int32 last_log_index = 3;
  int32 last_log_term = 4;
}

// Response to vote request
message RequestVoteResponse {
  int32 term = 1;
  bool vote_granted = 2;
}

// AppendEntries request sent by leader
message AppendEntriesRequest {
  int32 term = 1;
  int32 leader_id = 2;
  int32 prev_log_index = 3;
  int32 prev_log_term = 4;
  repeated LogEntry entries = 5;
  int32 leader_commit = 6;
}

// Response to append entries
message AppendEntriesResponse {
  int32 term = 1;
  bool success = 2;
  int32 conflict_index = 3;  // For faster log reconciliation
} 